enum NodeType {
  eof,
  name,
  asKw,
  autoKw,
  autoReadOnlyKw,
  elseKw,
  elseIfKw,
  endEventKw,
  endFunctionKw,
  endIfKw,
  endPropertyKw,
  endStateKw,
  endWhileKw,
  eventKw,
  extendsKw,
  falseKw,
  functionKw,
  globalKw,
  ifKw,
  importKw,
  lengthKw,
  nativeKw,
  newKw,
  noneKw,
  parentKw,
  propertyKw,
  returnKw,
  scriptNameKw,
  selfKw,
  stateKw,
  trueKw,
  whileKw,
  parenL,
  parenR,
  comma,
  bracketL,
  bracketR,
  braceL,
  braceR,
  colon,
  equality,
  equal,
  assign,
  num,
  slash,
  string,
  binary,
  logical,
  logicalOR,
  logicalAND,
  incrementDecrement,
  plusMinus,
  relational,
  char,
  star,
  starstar,
  modulo,
  dot,
  id,
  literal,
  block,
  member,
  variable,
  variableDeclaration,
  program,
  lineTerminator,
  expressionStatement,
  conditionalKw,
  hiddenKw,
  readonlyKw,
  writeonlyKw,
  prefix,
}

const keywordsMap = {
  'as': NodeType.asKw,
  'auto': NodeType.autoKw,
  'autoreadonly': NodeType.autoReadOnlyKw,
  'else': NodeType.elseKw,
  'elseif': NodeType.elseIfKw,
  'endevent': NodeType.endEventKw,
  'endfunction': NodeType.endFunctionKw,
  'endif': NodeType.endIfKw,
  'endproperty': NodeType.endPropertyKw,
  'endstate': NodeType.endStateKw,
  'endwhile': NodeType.endWhileKw,
  'event': NodeType.eventKw,
  'extends': NodeType.extendsKw,
  'false': NodeType.falseKw,
  'function': NodeType.functionKw,
  'global': NodeType.globalKw,
  'if': NodeType.ifKw,
  'import': NodeType.importKw,
  'length': NodeType.lengthKw,
  'native': NodeType.nativeKw,
  'new': NodeType.newKw,
  'none': NodeType.noneKw,
  'parent': NodeType.parentKw,
  'property': NodeType.propertyKw,
  'return': NodeType.returnKw,
  'scriptname': NodeType.scriptNameKw,
  'self': NodeType.selfKw,
  'state': NodeType.stateKw,
  'true': NodeType.trueKw,
  'while': NodeType.whileKw,
  'conditional': NodeType.conditionalKw,
  'hidden': NodeType.hiddenKw,
  'readonly': NodeType.readonlyKw,
  'writeonly': NodeType.writeonlyKw
};
